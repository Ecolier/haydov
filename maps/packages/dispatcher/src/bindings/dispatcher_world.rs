// Generated by `wit-bindgen` 0.43.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod exports {
  pub mod maps {
    pub mod plugin {

      #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
      pub mod dispatcher {
        #[used]
        #[doc(hidden)]
        static __FORCE_SECTION_REF: fn() =
        super::super::super::super::__link_custom_section_describing_imports;
        
        use super::super::super::super::_rt;
        #[derive(Clone)]
        pub struct Schema {
          pub base_url: _rt::String,
          pub filename_template: _rt::String,
          pub regions: _rt::Vec::<_rt::String>,
        }
        impl ::core::fmt::Debug for Schema {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Schema").field("base-url", &self.base_url).field("filename-template", &self.filename_template).field("regions", &self.regions).finish()
          }
        }
        #[doc(hidden)]
        #[allow(non_snake_case, unused_unsafe)]
        pub unsafe fn _export_parse_urls_cabi<T: Guest>(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> *mut u8 { unsafe {#[cfg(target_arch="wasm32")]
        _rt::run_ctors_once();let result6 = {
          let len0 = arg1;
          let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
          let len1 = arg3;
          let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
          let base5 = arg4;
          let len5 = arg5;
          let mut result5 = _rt::Vec::with_capacity(len5);
          for i in 0..len5 {
            let base = base5.add(i * (2*::core::mem::size_of::<*const u8>()));
            let e5 = {
              let l2 = *base.add(0).cast::<*mut u8>();
              let l3 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
              let len4 = l3;
              let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

              _rt::string_lift(bytes4)
            };
            result5.push(e5);
          }
          _rt::cabi_dealloc(base5, len5 * (2*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>());
          T::parse_urls(Schema{
            base_url: _rt::string_lift(bytes0),
            filename_template: _rt::string_lift(bytes1),
            regions: result5,
          })
        };
        let ptr7 = (&raw mut _RET_AREA.0).cast::<u8>();
        let vec9 = result6;
        let len9 = vec9.len();
        let layout9 = _rt::alloc::Layout::from_size_align(vec9.len() * (2*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>()).unwrap();
        let (result9, _cleanup9) = wit_bindgen::rt::Cleanup::new(layout9);if let Some(cleanup) = _cleanup9 { cleanup.forget(); }
        for (i, e) in vec9.into_iter().enumerate() {
          let base = result9.add(i * (2*::core::mem::size_of::<*const u8>()));
          {
            let vec8 = (e.into_bytes()).into_boxed_slice();
            let ptr8 = vec8.as_ptr().cast::<u8>();
            let len8 = vec8.len();
            ::core::mem::forget(vec8);
            *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len8;
            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
          }
        }
        *ptr7.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len9;
        *ptr7.add(0).cast::<*mut u8>() = result9;
        ptr7
      } }
      #[doc(hidden)]
      #[allow(non_snake_case)]
      pub unsafe fn __post_return_parse_urls<T: Guest>(arg0: *mut u8,) { unsafe {
        let l0 = *arg0.add(0).cast::<*mut u8>();
        let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
        let base4 = l0;
        let len4 = l1;
        for i in 0..len4 {
          let base = base4.add(i * (2*::core::mem::size_of::<*const u8>()));
          {
            let l2 = *base.add(0).cast::<*mut u8>();
            let l3 = *base.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
            _rt::cabi_dealloc(l2, l3, 1);
          }
        }
        _rt::cabi_dealloc(base4, len4 * (2*::core::mem::size_of::<*const u8>()), ::core::mem::size_of::<*const u8>());
      } }
      pub trait Guest {
        #[allow(async_fn_in_trait)]
        fn parse_urls(schema: Schema,) -> _rt::Vec::<_rt::String>;
      }
      #[doc(hidden)]

      macro_rules! __export_maps_plugin_dispatcher_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "maps:plugin/dispatcher#parse-urls")]
          unsafe extern "C" fn export_parse_urls(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,arg4: *mut u8,arg5: usize,) -> *mut u8 {
            unsafe { $($path_to_types)*::_export_parse_urls_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5) }
          }
          #[unsafe(export_name = "cabi_post_maps:plugin/dispatcher#parse-urls")]
          unsafe extern "C" fn _post_return_parse_urls(arg0: *mut u8,) {
            unsafe { $($path_to_types)*::__post_return_parse_urls::<$ty>(arg0) }
          }
        };);
      }
      #[doc(hidden)]
      pub(crate) use __export_maps_plugin_dispatcher_cabi;

      #[cfg_attr(target_pointer_width="64", repr(align(8)))]
      #[cfg_attr(target_pointer_width="32", repr(align(4)))]
      struct _RetArea([::core::mem::MaybeUninit::<u8>; 2*::core::mem::size_of::<*const u8>()]);
      static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 2*::core::mem::size_of::<*const u8>()]);

    }

  }
}
}
mod _rt {
  #![allow(dead_code, clippy::all)]
  pub use alloc_crate::string::String;
  pub use alloc_crate::vec::Vec;

  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
  pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
    if cfg!(debug_assertions) {
      String::from_utf8(bytes).unwrap()
    } else {
      unsafe { String::from_utf8_unchecked(bytes) }
    }
  }
  pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
    if size == 0 {
      return;
    }
    unsafe {
      let layout = alloc::Layout::from_size_align_unchecked(size, align);
      alloc::dealloc(ptr, layout);
    }
  }
  pub use alloc_crate::alloc;
  extern crate alloc as alloc_crate;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_dispatcher_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::maps::plugin::dispatcher::__export_maps_plugin_dispatcher_cabi!($ty with_types_in $($path_to_types_root)*::exports::maps::plugin::dispatcher);
  )
}
#[doc(inline)]
pub(crate) use __export_dispatcher_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.43.0:maps:plugin:dispatcher-world:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 288] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x99\x01\x01A\x02\x01\
A\x02\x01B\x05\x01ps\x01r\x03\x08base-urls\x11filename-templates\x07regions\0\x04\
\0\x06schema\x03\0\x01\x01@\x01\x06schema\x02\0\0\x04\0\x0aparse-urls\x01\x03\x04\
\0\x16maps:plugin/dispatcher\x05\0\x04\0\x1cmaps:plugin/dispatcher-world\x04\0\x0b\
\x16\x01\0\x10dispatcher-world\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0d\
wit-component\x070.235.0\x10wit-bindgen-rust\x060.43.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

